---
import Layout from '$layouts/Donut.astro';
import { client } from '$lib/sanity';
import Heading from '$components/Heading.astro';
import Recipe from '$components/Recipe.svelte';
import { buildTiming } from '$js/time.js';
import md from 'chromeos-dev-markdown';

/**
 * Builds statuc path data for the pages
 * @return {Object} The static path data
 */
export async function getStaticPaths() {
  const query =
    '*[_type == "recipe" &&  !(_id in path("drafts.**"))]{"image": mainImage.asset->url, title, slug, published, instructions, difficulty, yield, body}';

  const recipes = await client.fetch(query);

  return recipes.map((recipe) => {
    return {
      params: {
        slug: recipe.slug.current,
      },
      props: {
        title: recipe.title,
        body: recipe.body,
        published: new Date(recipe.published),
        instructions: recipe.instructions,
        difficulty: recipe.difficulty,
        yield: recipe.yield,
        image: recipe.image,
      },
    };
  });
}

const {
  title,
  body,
  published,
  difficulty,
  yield: servings,
  image,
  instructions,
} = Astro.props;

// Build overall timing
const timing = instructions
  .map((step) => [step?.time?.active, step?.time?.inactive, step?.time?.rest])
  .reduce(
    (acc, cur, ci, arr) => {
      for (let i = 0; i < cur.length; i++) {
        const time = cur[i];
        if (time) {
          let min = 0;
          let max = 0;
          const t = time.split(' ');
          const d = t[0];
          if (d.includes('-')) {
            [min, max] = d.split('-');
          } else {
            min = d;
            max = d;
          }

          min = Number(min);
          max = Number(max);

          if (t[1].includes('hour')) {
            min *= 60;
            max *= 60;
          }

          if (i === 0) {
            acc.active.min += min;
            acc.active.max += max;
          } else if (i === 1) {
            acc.inactive.min += min;
            acc.inactive.max += max;
          } else if (i === 2) {
            acc.rest.min += min;
            acc.rest.max += max;
          }
        }
      }

      if (arr.length - 1 === ci) {
        const t = {
          active: buildTiming(acc.active),
          inactive: buildTiming(acc.inactive),
          rest: buildTiming(acc.rest),
          overall: buildTiming({
            min: acc.active.min + acc.inactive.min,
            max: acc.active.max + acc.inactive.max,
          }),
        };

        let output = `<time itemprop="totalTime">${t.overall}</time>`;

        if (t.rest) {
          output += `, plus <time itemprop="prepTime">${t.rest}</time> resting`;
        } else if (t.active && t.inactive) {
          output += `, with <time itemprop="cookTime">${t.active}</time> active and <time itemprop="prepTime">${t.inactive}</time> inactive`;
        }

        return output;
      }

      return acc;
    },
    {
      active: {
        min: 0,
        max: 0,
      },
      inactive: {
        min: 0,
        max: 0,
      },
      rest: {
        min: 0,
        max: 0,
      },
    },
  );

const equipment = instructions
  .map((step) => step?.equipment)
  .filter((e) => e)
  .flat();

// console.log(equipment);
// console.log(timing);

// console.log(instructions);
---

<Layout title={title} summary={'Recipe for ' + title + ' by Sam Richard'}>
  <main itemscope itemtype="http://schema.org/Recipe">
    <article class="recipe">
      <header class="recipe--heading">
        <Heading
          {title}
          hue={25}
          saturation={30}
          lightness={50}
          size={70}
          alpha={0.5}
        />
      </header>
      <div class="recipe--image">
        <img itemprop="image" src={image} alt={title} />
      </div>

      <section class="recipe--overview-container">
        <table class="recipe--overview">
          <tbody>
            <tr>
              <td>Yield</td>
              <td itemprop="recipeYield">{servings}</td>
            </tr>
            <tr>
              <td>Estimated Time</td>
              <td set:html={timing} />
              <tr>
                <td>Difficulty</td>
                <td>{difficulty}</td>
              </tr>
              {
                equipment.length > 0 && (
                  <tr>
                    <td>Special requirements</td>
                    <td>{equipment.join(', ')}</td>
                  </tr>
                )
              }</tr
            >
          </tbody>
        </table>
      </section>
      <!-- <a href="#recipe" class="recipe--jump">Jump to Recipe</a> -->
      <hr class="type--hr" />
      <div class="recipe--content-wrapper">
        <time class="recipe--date" datetime={published.toISOString()}
          >{
            published.toLocaleDateString([], {
              year: 'numeric',
              month: 'numeric',
              day: 'numeric',
            })
          }
        </time>
        <section
          class="recipe--content type"
          itemprop="description"
          set:html={md.render(body)}
        />
      </div>

      <section id="recipe" class="recipe--steps">
        <Recipe {instructions} />
      </section>
    </article>
  </main>
</Layout>

<style lang="scss">
  @import 'letterform-shades/stylesheets/letterform-shades';

  .recipe {
    padding-bottom: var(--spacing);
    scroll-behavior: smooth;

    &--heading {
      --heading-min-height: calc(33vh + 3rem);
      --heading-padding: var(--spacing) var(--spacing) 5rem var(--spacing);
      // background: hsl(171, 100%, 30%);
      // background: var(--red);

      background-image: linear-gradient(
        to bottom right,
        var(--light-red),
        var(--red)
      );
      // height: max(calc(33vh + 3rem), 50vh);
    }

    &--date {
      background-color: var(--black);
      border-radius: 0 0 0 5px;
      color: transparent;
      float: right;
      font-size: 1rem;
      line-height: 1;
      padding-bottom: 1rem;
      padding-left: 1rem;
      padding-top: 0.4rem;
      position: relative;
      -webkit-text-stroke: 1px var(--snow);
      writing-mode: vertical-lr;
      z-index: 2;
    }

    &--overview-container,
    &--content-wrapper {
      margin: 0 auto;
      margin-top: 1rem;
      max-width: calc(60ch + 4rem);
      padding: 0 var(--spacing);
      position: relative;
    }

    &--overview {
      font-size: 0.8rem;
      width: 100%;

      td:first-child {
        padding-right: 0.5rem;
        text-transform: uppercase;
      }

      td:last-child {
        font-style: italic;
        padding-left: 0.5rem;
        text-transform: capitalize;
      }

      tr:not(:last-child) td {
        padding-bottom: 0.5rem;
      }
    }

    &--content::first-letter {
      @include close-shade(
        var(--light-red),
        var(--dark-red),
        'bottom right',
        15
      );
      color: var(--snow);
      float: left;
      font-size: 4em;
      line-height: 1;
      margin-top: 5px;
      padding-bottom: 0.5rem;
      padding-right: 0.5rem;
    }

    &--image {
      margin-left: auto;
      margin-right: auto;
      margin-top: -3rem;
      max-width: calc(60ch + 4rem);

      @media (min-width: 60ch) {
        img {
          border-radius: 0.5rem;
          box-shadow: 0.5rem 0.5rem 0.5rem rgba(0, 0, 0, 0.2);
        }
      }
    }

    &--steps {
      margin: 0 auto;
      margin-top: var(--spacing);
      max-width: calc(80ch + 4rem);
      padding: 0 var(--spacing);
      padding-top: var(--spacing);
    }

    &--jump {
      display: block;
      font-size: 0.8rem;
      margin-top: calc(var(--spacing) / 2);
      text-align: center;
      text-transform: uppercase;
      width: 100%;

      &::before,
      &::after {
        content: 'â–¾';
        margin-inline: 0.5rem;
      }
    }
  }
</style>
